sudo: required
language: python

services:
  - docker
cache: pip

notifications:
  email:
    - pki-devel@redhat.com
  on_success: change
  on_failure: change

jobs:
  include:
    # Stage 1: Build jss
    - stage: Build stage 1
      env:
        - TASK="jss"
      before_install:
        # Export variables to be available for all scripts
        - set -a && source global_variables

        # Initialize the docker environment
        - ./buildInit.sh

      install:
        # Install required packages inside container
        - ./buildInstall.sh

      before_script:
        # Clone upstream PKI repo from github
        - ./setupCOPR.sh

      script:
        # Generate SRPM
        - >
          docker exec -i ${TASK} ${TASK}/build.sh
          --with-timestamp
          --with-commit-id
          --work-dir=${DEST_PKG_DIR} srpm
        # Trigger a COPR build
        - travis_wait 20 ./buildCOPR.sh

        # Test whether the SRPM is available at the correct location
        - docker exec -it ${TASK} ls ${DEST_PKG_DIR}/SRPMS/

      after_script:
        - docker kill ${TASK}
        - docker rm ${TASK}

    # Stage 1: Build Nuxwdog
    - env:
        - TASK="nuxwdog"
      before_install:
        # Export variables to be available for all scripts
        - set -a && source global_variables

        # Initialize the docker environment
        - ./buildInit.sh

      install:
        # Install required packages inside container
        - ./buildInstall.sh

      before_script:
        # Clone upstream PKI repo from github
        - ./setupCOPR.sh

      script:
        # Generate SRPM
        - >
          docker exec -i ${TASK} ${TASK}/build.sh
          --with-timestamp
          --with-commit-id
          --work-dir=${DEST_PKG_DIR} srpm
        # Trigger a COPR build
        - travis_wait 20 ./buildCOPR.sh

        # Test whether the SRPM is available at the correct location
        - docker exec -it ${TASK} ls ${DEST_PKG_DIR}/SRPMS/

      after_script:
        - docker kill ${TASK}
        - docker rm ${TASK}
        

    # Stage 2: TomcatJSS
    - stage: Build stage 2
      env:
        - TASK="tomcatjss"
      before_install:
        # Export variables to be available for all scripts
        - set -a && source global_variables

        # Initialize the docker environment
        - ./buildInit.sh

      install:
        # Install required packages inside container
        - ./buildInstall.sh

      before_script:
        # Clone upstream PKI repo from github
        - ./setupCOPR.sh

      script:
        # Generate SRPM
        - >
          docker exec -i ${TASK} ${TASK}/build.sh
          --with-timestamp
          --with-commit-id
          --work-dir=${DEST_PKG_DIR} srpm
        # Trigger a COPR build
        - travis_wait 20 ./buildCOPR.sh

        # Test whether the SRPM is available at the correct location
        - docker exec -it ${TASK} ls ${DEST_PKG_DIR}/SRPMS/

      after_script:
        - docker kill ${TASK}
        - docker rm ${TASK}

    # Stage 2: ldapJDK
    - env:
        - TASK="ldap-sdk"
      before_install:
        # Export variables to be available for all scripts
        - set -a && source global_variables

        # Initialize the docker environment
        - ./buildInit.sh

      install:
        # Install required packages inside container
        - ./buildInstall.sh

      before_script:
        # Clone upstream PKI repo from github
        - ./setupCOPR.sh

      script:
        # Generate SRPM
        - >
          docker exec -i ${TASK} ${TASK}/build.sh
          --with-timestamp
          --with-commit-id
          --work-dir=${DEST_PKG_DIR} srpm
        # Trigger a COPR build
        - travis_wait 20 ./buildCOPR.sh

        # Test whether the SRPM is available at the correct location
        - docker exec -it ${TASK} ls ${DEST_PKG_DIR}/SRPMS/

      after_script:
        - docker kill ${TASK}
        - docker rm ${TASK}

    # Stage 3: pki
    - stage: Build stage 3
      env:
        - TASK="pki"
      before_install:
        # Export variables to be available for all scripts
        - set -a && source global_variables

        # Initialize the docker environment
        - ./buildInit.sh
      
      install:
        # Install required packages inside container
        - ./buildInstall.sh

      before_script:
        # Clone upstream PKI repo from github
        - ./setupCOPR.sh

      script:
        # Generate SRPM
        - >
          docker exec -i ${TASK} ${TASK}/build.sh
          --with-timestamp
          --with-commit-id
          --work-dir=${DEST_PKG_DIR} srpm
        # Trigger a COPR build
        - travis_wait 20 ./buildCOPR.sh

        # Test whether the SRPM is available at the correct location
        - docker exec -it ${TASK} ls ${DEST_PKG_DIR}/SRPMS/

      # Clean the COPR repo for builds > 7 days (run only once to clean all)
      after_script:
        - docker exec -it ${TASK} /tmp/pki-copr-cleaner.py
        - docker kill ${TASK}
        - docker rm ${TASK}

    # Stage 4: IPA Test
    - stage: IPA Nightly Test
      env:
        - TASK="IPA test on F27"
        - BASE_IMAGE_VERSION=27
        - GITHUB_REPO="https://github.com/dogtagpki/pki.git"

      before_install:  
        - git clone ${GITHUB_REPO}
        - set -a && source pki/travis/global_variables
        - set -a && source global_variables
        - touch ${LOGS}

      install:
        - pki/travis/builder-init.sh
        - docker exec -it ${CONTAINER} dnf install -y dnf-plugins-core
        # Enable nightly COPR repo
        - docker exec -it ${CONTAINER} dnf copr enable -y ${TEST_COPR_REPO}
        # Install latest IPA from official fedora/updates repo
        - docker exec -it ${CONTAINER} ${BUILDDIR}/pki/pki/travis/ipa-init.sh

      script:
        # Run the IPA tests
        - docker exec -it ${CONTAINER} ${BUILDDIR}/pki/pki/travis/ipa-test.sh

      after_script:
        - cat ${LOGS}
        - docker kill ${CONTAINER}
        - docker rm ${CONTAINER}

    - env:
        - TASK="IPA test on F28"
        - BASE_IMAGE_VERSION=28
        - GITHUB_REPO="https://github.com/dogtagpki/pki.git"

      before_install:  
        - git clone ${GITHUB_REPO}
        - set -a && source pki/travis/global_variables
        - set -a && source global_variables
        - touch ${LOGS}

      install:
        - pki/travis/builder-init.sh
        - docker exec -it ${CONTAINER} dnf install -y dnf-plugins-core
        # Enable nightly COPR repo
        - docker exec -it ${CONTAINER} dnf copr enable -y ${TEST_COPR_REPO}
        # Install latest IPA from official fedora/updates repo
        - docker exec -it ${CONTAINER} ${BUILDDIR}/pki/pki/travis/ipa-init.sh

      script:
        # Run the IPA tests
        - docker exec -it ${CONTAINER} ${BUILDDIR}/pki/pki/travis/ipa-test.sh

      after_script:
        - cat ${LOGS}
        - docker kill ${CONTAINER}
        - docker rm ${CONTAINER}